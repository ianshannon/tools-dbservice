akka {
  actor {
    debug {
      autoreceive = on
      lifecycle = on
      receive = on
      event-stream = on
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  event-handlers = "akka.event.slf4j.Slf4jEventHandler"

  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
}

dbservice {
  defaults {
    workerCount = 3
    minRequestId = 1000000
    maxRequestId = 9999999
  }
  timeoutInSeconds {
    request = 10
    subrequest = 5
  }
  dataSource {
    className = com.informix.jdbc.IfxDriver
    url = "jdbc:informix-sqli://10.199.26.227:9088/openbet:INFORMIXSERVER=ol_informix1170;IFX_LOCK_MODE_WAIT=20;user=openbet;password=1ncharge"
    xurl = "jdbc:informix-sqli://keystone-db-tickers.aws.openbet.com:1924/backbone:INFORMIXSERVER=pri_app;DB_LOCALE=en_us.utf8;CLIENT_LOCALE=en_us.utf8"
    yurl = "jdbc:informix-sqli://10.199.51.33:1924/backbone:INFORMIXSERVER=pri_app;DB_LOCALE=en_us.utf8;CLIENT_LOCALE=en_us.utf8"
    query {
      selectIdentities = "select user_id as id,username from tAdminUser"
      selectIdentity = "select usr.user_id as id,usr.username,usr.fname as firstname,usr.lname as lastname,usr.email,usr.status as active,\"true\" as editable,pos.position_name as position from tAdminUser usr left outer join tAdminPosition pos on(pos.position_id = usr.position_id) where usr.user_id = ?"
    }
  }
}
core-security {
  tenantId = "openbet"                                // tenant ID
  serviceName = "dbservice"                        // service Name
}
dbservice {
  http {
    host = localhost
    port = 9589
  }

  queriesDirectory = "/space/data/querystore"                // directory to find/store query files

  message_UserId = "DbService - needs a userId parameter to check if we are allowed to process this request for you\n\nplease add ?userId=YOURUSERID (replace the text YOURUSERID with your actual user id)"
  message_NotAllowed = "YOU - are not allowed to do this"
  message_Invalid = "Invalid Request ({URL})"

  message_NeedUserId = "CoreSecurity - needs a userid parameter to check if you are allowed to view this report.\n\nPlease add ?userid=YOURUSERID (replace the text YOURUSERID with your actual user id).";
  message_NoReport = "Requested Report does not exist."
}

core-security-sdk {

  cacheDirectory = "/space/data/dbservice-service"               // Root directory for backing store
  kafka_servers = "localhost:18011"                             //list of servers
  //  kafka_servers = "10.199.26.246:19373"

  identitiesForDefaultPermissions = "Administrator as admin,operator,guest"  // Used when creating Mocked permission cache for the first time

  kafka_producer {
    bootstrap.servers = "%SERVERS%"               //""localhost:18011"
    key.serializer = org.apache.kafka.common.serialization.StringSerializer
    value.serializer = org.apache.kafka.common.serialization.StringSerializer
    acks = 1	            //1=leader ack
    retries = 3           //retry 3 times
    linger.ms = 5         //
  }

  kafka_consumer {
    bootstrap.servers = "%SERVERS%"               //""localhost:18011"
    key.deserializer = org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer = org.apache.kafka.common.serialization.StringDeserializer
    group.id = "coresecurity_%UID%"            //replace %UID% in code - to make instance unique (one Group per/ instance)
    enable.auto.commit = false		//turn off auto-commit (use .commitAsync manually in loop)
  }
  permission_pipeline = "mock"

}