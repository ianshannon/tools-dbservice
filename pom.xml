<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.openbet.backoffice.security</groupId>
    <artifactId>tools-dbservice</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <spring.boot.version>1.5.4.RELEASE</spring.boot.version>

        <!-- Static Swagger document generation -->
        <swagger2markup.version>1.3.3</swagger2markup.version>
        <asciidoctor.maven.plugin.version>1.5.3</asciidoctor.maven.plugin.version>
        <asciidoctorj.pdf.version>1.5.0-alpha.11</asciidoctorj.pdf.version>
        <asciidoctorj.version>1.5.4</asciidoctorj.version>
        <jruby.version>1.7.21</jruby.version>
        <rubygems.prawn.version>2.0.2</rubygems.prawn.version>
        <theme.dir>${project.basedir}/docs/theme</theme.dir>
        <generated.asciidoc.directory>${project.build.outputDirectory}/asciidoc/generated</generated.asciidoc.directory>
        <asciidoctor.html.output.directory>${project.build.outputDirectory}/asciidoc/html</asciidoctor.html.output.directory>
        <asciidoctor.pdf.output.directory>${project.build.outputDirectory}/asciidoc/pdf</asciidoctor.pdf.output.directory>

        <!-- Akka -->
        <akka.http.version>10.0.10</akka.http.version>
        <akka.version>2.5.4</akka.version>
        <akka.streams.version>2.5.4</akka.streams.version>

        <!-- Docker image -->
        <docker.build.image.name>${project.artifactId}</docker.build.image.name>
        <docker.build.image.tag>latest</docker.build.image.tag>
        <docker.nyx.registry>nyx.registry.dev.openbet.com</docker.nyx.registry>

        <!-- Cucumber -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <cucumber.version>1.2.5</cucumber.version>

        <!-- junit -->
        <junit.jupiter.version>5.0.0-M4</junit.jupiter.version>
        <junit.platform.version>1.0.0-M4</junit.platform.version>

        <coresecurity.version>0.1.2</coresecurity.version>

    </properties>

    <dependencies>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor_2.11</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_2.11</artifactId>
            <version>${akka.streams.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-core_2.11</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http_2.11</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-slf4j_2.11</artifactId>
            <version>2.5.3</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>1.2.3</version>
        </dependency>

        <dependency>
            <groupId>com.softwaremill.akka-http-session</groupId>
            <artifactId>core_2.11</artifactId>
            <version>0.5.1</version>
        </dependency>
        <dependency>
            <groupId>com.softwaremill.akka-http-session</groupId>
            <artifactId>jwt_2.11</artifactId>
            <version>0.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.jasig.cas.client</groupId>
            <artifactId>cas-client-core</artifactId>
            <version>3.4.1</version>
        </dependency>

        <!-- TEST -->
        <!--<dependency>-->
            <!--<groupId>junit</groupId>-->
            <!--<artifactId>junit</artifactId>-->
            <!--<version>4.12</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>org.junit.jupiter</groupId>-->
            <!--<artifactId>junit-jupiter-engine</artifactId>-->
            <!--<version>${junit.jupiter.version}</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>org.junit.jupiter</groupId>-->
            <!--<artifactId>junit-jupiter-api</artifactId>-->
            <!--<version>${junit.jupiter.version}</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>1.0.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.0.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>4.12.1</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-testkit_2.11</artifactId>
            <version>${akka.http.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_2.11</artifactId>
            <version>3.0.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-java8</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Prometheus Java Client -->
        <!-- The client -->
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient</artifactId>
            <version>0.0.26</version>
        </dependency>
        <!-- Hotspot JVM metrics-->
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_hotspot</artifactId>
            <version>0.0.26</version>
        </dependency>
        <!-- Exposition servlet-->
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_servlet</artifactId>
            <version>0.0.26</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-deploy-plugin -->
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-deploy-plugin</artifactId>
            <version>2.8.2</version>
        </dependency>
        <dependency>
            <groupId>com.openbet.backoffice.security</groupId>
            <artifactId>openbet-coresecurity-sdk</artifactId>
            <version>${coresecurity.version}</version>
        </dependency>

        <!-- JDBC -->
        <dependency>
            <groupId>com.informix</groupId>
            <artifactId>ifxjdbc</artifactId>
            <version>3.70.JC8W1</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.ibm.informix/jdbc -->
        <dependency>
            <groupId>com.ibm.informix</groupId>
            <artifactId>jdbc</artifactId>
            <version>4.10.6.20151104</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.microsoft.sqlserver/mssql-jdbc -->
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <version>6.5.0.jre8-preview</version>
        </dependency>

    </dependencies>

    <!--<distributionManagement>-->
        <!--<repository>-->
            <!--<uniqueVersion>false</uniqueVersion>-->
            <!--<id>ReleaseArtifactory</id>-->
            <!--<name>openbet-release-local</name>-->
            <!--<url>https://artifactory.int.openbet.com/artifactory/openbet-repository</url>-->
            <!--<layout>default</layout>-->
        <!--</repository>-->
        <!--<snapshotRepository>-->
            <!--<uniqueVersion>true</uniqueVersion>-->
            <!--<id>SnapshotArtifactory</id>-->
            <!--<name>openbet-snapshot-local</name>-->
            <!--<url>https://artifactory.int.openbet.com/artifactory/openbet-repository</url>-->
            <!--<layout>default</layout>-->
        <!--</snapshotRepository>-->
    <!--</distributionManagement>-->

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <classifier>bundle</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- First, use the swagger2markup plugin to generate asciidoc -->
            <plugin>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-maven-plugin</artifactId>
                <version>${swagger2markup.version}</version>
                <configuration>
                    <swaggerInput>${basedir}/docs/swagger.yaml</swaggerInput>
                    <outputDir>${generated.asciidoc.directory}</outputDir>
                    <config>
                        <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                        <swagger2markup.generatedExamplesEnabled>true</swagger2markup.generatedExamplesEnabled>
                    </config>
                </configuration>
                <executions>
                    <execution>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>convertSwagger2markup</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Run the generated asciidoc through Asciidoctor to generate
                     other documentation types, such as PDFs or HTML5 -->
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>${asciidoctor.maven.plugin.version}</version>
                <!-- Include Asciidoctor PDF for pdf generation -->
                <dependencies>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>${asciidoctorj.pdf.version}</version>
                    </dependency>
                    <!-- Comment this section to use the default jruby artifact provided by the plugin -->
                    <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                        <version>${jruby.version}</version>
                    </dependency>
                    <!-- Comment this section to use the default AsciidoctorJ artifact provided by the plugin -->
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj</artifactId>
                        <version>${asciidoctorj.version}</version>
                    </dependency>
                </dependencies>
                <!-- Configure generic document generation settings -->
                <configuration>
                    <sourceDirectory>docs</sourceDirectory>
                    <sourceDocumentName>api.adoc</sourceDocumentName>
                    <gemPath>${project.build.directory}/gems-provided</gemPath>
                    <attributes>
                        <doctype>book</doctype>
                        <toc>left</toc>
                        <toclevels>3</toclevels>
                        <numbered/>
                        <hardbreaks/>
                        <sectlinks/>
                        <sectanchors/>
                        <generated>${generated.asciidoc.directory}</generated>
                        <project-version>${project.version}</project-version>
                    </attributes>
                </configuration>
                <!-- Since each execution can only handle one backend, run
                         separate executions for each desired output type -->
                <executions>
                    <execution>
                        <id>output-html</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>html5</backend>
                            <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                        </configuration>
                    </execution>

                    <execution>
                        <id>output-pdf</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>pdf</backend>
                            <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
                            <attributes>
                                <pdf-stylesdir>${theme.dir}</pdf-stylesdir>
                                <pdf-style>openbet</pdf-style>
                            </attributes>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <!-- Build docker image-->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.21.0</version>
                <configuration>
                    <registry>${docker.nyx.registry}</registry>
                    <images>
                        <image>
                            <name>${docker.nyx.registry}/${docker.build.image.name}:${docker.build.image.tag}</name>
                            <build>
                                <dockerFileDir>${project.basedir}/docker/service</dockerFileDir>
                                <assembly>
                                    <inline>
                                        <fileSets>
                                            <fileSet>
                                                <directory>target</directory>
                                                <includes>
                                                    <include>*-bundle.jar</include>
                                                </includes>
                                            </fileSet>
                                            <fileSet>
                                                <directory>target/classes/asciidoc/html</directory>
                                                <includes>
                                                    <include>api.html</include>
                                                </includes>
                                            </fileSet>
                                        </fileSets>
                                    </inline>
                                </assembly>
                            </build>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>docker-build</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>docker-push</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.20.1</version>
                <configuration>
                    <includes>
                        <include>**/*CT.java</include>
                        <include>**/*IT.java</include>
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>